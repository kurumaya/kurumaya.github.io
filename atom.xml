<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[]]></title>
  <link href="http://kurumaya.github.io/atom.xml" rel="self"/>
  <link href="http://kurumaya.github.io/"/>
  <updated>2013-05-16T23:46:50+09:00</updated>
  <id>http://kurumaya.github.io/</id>
  <author>
    <name><![CDATA[kurumaya]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopressのrake previewやrake generateが終わらない]]></title>
    <link href="http://kurumaya.github.io/blog/2013/05/06/octopress-bundle-directory-watcher/"/>
    <updated>2013-05-06T15:23:00+09:00</updated>
    <id>http://kurumaya.github.io/blog/2013/05/06/octopress-bundle-directory-watcher</id>
    <content type="html"><![CDATA[<h3>bundle updateの罠</h3>

<p>新しいものはいいものだ、とばかりにかけましたら、rake generateなどが永遠を約束する事態に。<br/>
ぐぐったところdirectory_watcherが1.5.1だとよろしくないようです。</p>

<p>参考：<a href="http://blog.satooshi.jp/blog/2013/04/09/octopress-preview-never-stop-auto-regeneration/">Octopressでpreviewしていたらregeneration: 1 files changedが終わらない場合の対処方法</a></p>

<p>というわけで、実際に入っているものを確かめます。</p>

<pre><code>$ bundle exec gem list

*** LOCAL GEMS ***

bundler (1.3.5)
chunky_png (1.2.8)
classifier (1.3.3)
compass (0.12.2)
directory_watcher (1.5.1)
fast-stemmer (1.0.2)
fssm (0.2.10)
haml (3.1.8)
jekyll (0.12.1)
kramdown (0.14.2)
liquid (2.3.0)
maruku (0.6.1)  
posix-spawn (0.3.6)
pygments.rb (0.3.7)
rack (1.5.2)
rack-protection (1.5.0)
rake (0.9.6)
rb-fsevent (0.9.3)
rdiscount (1.6.8)
RedCloth (4.2.9)
rubypants (0.2.0)
sass (3.2.8)
sass-globbing (1.0.0)
sinatra (1.4.2)
stringex (1.4.0)
syntax (1.0.0)
tilt (1.4.0)
yajl-ruby (1.1.0)
</code></pre>

<p>よかったこれだ。というわけで記事の通りにGemfileにバージョン指定を追加。<br/>
<code>$ vi Gemfile</code>で書けば十分でしょう。<code>gem "directory_watcher", "~&gt; 1.4.1"</code>を書き加えてwq、updateし直し。</p>

<pre><code>$ bundle update
Fetching gem metadata from http://rubygems.org/.......
Fetching gem metadata from http://rubygems.org/..
Resolving dependencies...
Using rake (0.9.6) 
Using RedCloth (4.2.9) 
Using chunky_png (1.2.8) 
Using fast-stemmer (1.0.2) 
Using classifier (1.3.3) 
Using fssm (0.2.10) 
Using sass (3.2.8) 
Using compass (0.12.2) 
Using directory_watcher (1.4.1) 
Using haml (3.1.8) 
Using kramdown (0.14.2) 
Using liquid (2.3.0) 
Using syntax (1.0.0) 
Using maruku (0.6.1) 
Using posix-spawn (0.3.6) 
Using yajl-ruby (1.1.0) 
Using pygments.rb (0.3.7) 
Using jekyll (0.12.1) 
Using rack (1.5.2) 
Using rack-protection (1.5.0) 
Using rb-fsevent (0.9.3) 
Using rdiscount (1.6.8) 
Using rubypants (0.2.0) 
Using sass-globbing (1.0.0) 
Using tilt (1.4.0) 
Using sinatra (1.4.2) 
Using stringex (1.4.0) 
Using bundler (1.3.5) 
Your bundle is updated!
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[iOS]UIWebviewへJSONでデータを取ってくる計画]]></title>
    <link href="http://kurumaya.github.io/blog/2013/05/06/json-to-ios/"/>
    <updated>2013-05-06T12:59:00+09:00</updated>
    <id>http://kurumaya.github.io/blog/2013/05/06/json-to-ios</id>
    <content type="html"><![CDATA[<p>Twitterなどの脈絡がなくても取れるものならこういう感じ。</p>

<pre><code>NSURL *httpDataUrl2 = [NSURL URLWithString:apiUrlJson];
NSURLRequest *request = [NSURLRequest requestWithURL:httpDataUrl2];
NSData *json_data = [NSURLConnection sendSynchronousRequest:request returningResponse:nil error:nil];
NSDictionary *jsonObject = [NSJSONSerialization JSONObjectWithData:json_data options:NSJSONReadingAllowFragments error:nil];
</code></pre>

<p>しかし今回はJSONで呼び出す側がセッションを使っているため、単純にURLで指定して取る方式は使えない。<br/>
Webviewを動かしJavascriptを介して取ってくる。</p>

<pre><code>[webView stringByEvaluatingJavaScriptFromString:@"alert('call from native');"];
</code></pre>

<p>ほんとにこれでいけるのか。<br/>
だめだったら素直にIDなんかを保持しといて、引数に渡す方式のを実装しとかないといけない。<br/>
その場合はメモリにためればいいのでそんなに難しくないはず。</p>

<h3>05/16追記</h3>

<p>単純に呼び出す箇所が悪いだけだった。</p>

<pre><code>- (BOOL) webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType
</code></pre>

<p>ここで確かめていたので取れない。遷移直前に呼ばれるためrequestにセッションがちゃんと入ってなかったりする。</p>

<pre><code>- (void) webViewDidFinishLoad:(UIWebView *)webView
</code></pre>

<p>これで問題無し。<br/>
Javascriptで実装する場合、Viewに依存することになってよくない。</p>

<h3>参考</h3>

<ul>
<li><a href="http://d.hatena.ne.jp/ntaku/20111103/1320288456">UIWebViewでWebとネイティブを相互連携させる方法について</a></li>
<li><a href="http://stackoverflow.com/questions/9796213/from-javascript-to-objective-c-with-json">From JavaScript to Objective-C with JSON</a></li>
<li><a href="http://d.hatena.ne.jp/language_and_engineering/20120713/p1">AndroidやiOSの「ハイブリッドアプリ」で，JavaScriptとネイティブ・コードが連携する仕組みを図解　（おまけ：HTML側で施すべき，クロスプラットフォーム対策）</a></li>
<li><a href="http://www.milkstand.net/fsgarage/archives/001534.html">iPhoneとWebサービスの連携手法</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[test post]]></title>
    <link href="http://kurumaya.github.io/blog/2013/05/05/test-post/"/>
    <updated>2013-05-05T23:48:00+09:00</updated>
    <id>http://kurumaya.github.io/blog/2013/05/05/test-post</id>
    <content type="html"><![CDATA[<h3>Hello Octopress</h3>

<ul>
<li><a href="http://rcmdnk.github.io/blog/2013/03/07/setup-octopress/">GitHub pages + Octopressの導入</a></li>
<li><a href="http://blog.glidenote.com/blog/2011/11/07/install-octopress-on-github/">GithubとOctopressでモダンな技術系ブログを作ってみる</a></li>
</ul>


<p>このあたりを参考に作ってみました。作ったというか設定しただけですが。</p>

<p><code>$ rake new_post["test post"]</code>などとページを作って、編集すればブログエントリがひとつできあがる。<br/>
<code>rake preview</code>でサーバを上げて、変更などを捕捉してくれる。<br/>
だけどどこにもないような。と思ったら、_config.ymlでエラー発生していた。<br/>
コロンのあとには半角スペースがないとだめ。<br/>
ちゃんとやれば1文字変えただけでも反映される。</p>

<h3>最初のpublish</h3>

<p><code>$ rake setup_github_pages</code> <br/>
でリモートリポジトリを設定して、<br/>
<code>$ rake generate</code><br/>
<code>$ rake deploy</code><br/>
これでよしなにやってくれる……はずなのだけれど、</p>

<pre><code>Warning: Permanently added 'github.com,204.232.175.90' (RSA) to the list of known hosts.  
Permission denied (publickey).  
fatal: Could not read from remote repository.  
</code></pre>

<p>鍵の設定が必要になってしまった。むむむ。<br/>
<code>vi ~/.ssh/config</code>で<code>IdentityFile ~/.ssh/id_rsa</code>など入れてなんとか突破。</p>

<ul>
<li><a href="http://www.creativegear.jp/2012/07/29/githubdeny/">GitHubへPushした時に Permission Denied で弾かれた時の対処</a></li>
<li><a href="http://d.hatena.ne.jp/MIZUNO/20080705/1215238138">複数の公開鍵を使い分ける</a></li>
</ul>


<h3>Markdown</h3>

<p><a href="http://blog.2310.net/archives/6">Markdown日本語訳</a></p>
]]></content>
  </entry>
  
</feed>
